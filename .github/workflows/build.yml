name: build
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: /var/apt/cache/archives
          key: ${{runner.os}}-packages
      - name: Install apt packages
        run: |-
          sudo apt-get -q update
          sudo apt-get $APT_OPTS install $PACKAGES
        env:
          APT_OPTS: >-
            -yq --no-install-suggests --no-install-recommends
          PACKAGES: >-
            coffeescript
            elixir
            fpc
            gawk
            groovy
            libjson-parse-perl
            lua5.3
            nim
            octave
            r-base
            rakudo
            valac
            zsh
      - name: Install Crystal
        run: curl -L https://crystal-lang.org/install.sh | sudo bash
      - name: Install Dart
        run: |-
          curl -JLO $DEB && sudo dpkg -i dart_3.0.7-1_amd64.deb
          echo '/usr/lib/dart/bin' >> "$GITHUB_PATH"
        env:
          DEB: https://storage.googleapis.com/dart-archive/channels/stable/release/latest/linux_packages/dart_3.0.7-1_amd64.deb
        working-directory: /tmp
      - name: Install Deno
        run: |-
          curl -JLO $URL && unzip deno-x86_64-unknown-linux-gnu.zip
          sudo mv deno /usr/bin/deno
        env:
          URL: https://github.com/denoland/deno/releases/download/v1.36.1/deno-x86_64-unknown-linux-gnu.zip
        working-directory: /tmp
      - name: Install DMD
        run: curl -JLO $DEB && sudo dpkg -i dmd_2.105.0-0_amd64.deb
        env:
          DEB: https://downloads.dlang.org/releases/2.x/2.105.0/dmd_2.105.0-0_amd64.deb
        working-directory: /tmp
      - name: Install Fennel
        run: |-
          curl -JLO $URL && chmod +x fennel-1.3.1
          sudo mv fennel-1.3.1 /usr/bin/fennel
        env:
          URL: https://fennel-lang.org/downloads/fennel-1.3.1
      - name: Install Scala
        run: curl -JLO $DEB && sudo dpkg -i scala-2.13.11.deb
        env:
          DEB: https://downloads.lightbend.com/scala/2.13.11/scala-2.13.11.deb
        working-directory: /tmp
      - name: Install livescript
        run: npm install -g livescript
      - name: Install hyperfine
        run: curl -JLO $DEB && sudo dpkg -i hyperfine_1.17.0_amd64.deb
        env:
          DEB: https://github.com/sharkdp/hyperfine/releases/download/v1.17.0/hyperfine_1.17.0_amd64.deb
        working-directory: /tmp
      - name: Set up PostgreSQL
        run: |-
          sudo systemctl start postgresql.service && pg_isready
          sudo -u postgres createuser --superuser $USER
          sudo -u postgres createdb 7SegmentDisplays
      - name: Set up MySQL
        run: |-
          sudo -E sh -c 'printf "$MYSQL_CNF" >>/etc/mysql/my.cnf'
          sudo systemctl start mysql.service && mysqladmin ping
          mysql -e 'CREATE DATABASE 7SegmentDisplays;'
        env:
          MYSQL_CNF: |
            [client]
            user=root
            password=root
            loose-local-infile=1
            [mysqld]
            local_infile=1
            secure-file-priv=
      - name: Compile programs
        run: make all
      - name: Run tests
        run: make test
      - name: Run benchmarks
        run: make bench
        if: github.event_name == 'push'
      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.event_name == 'push'
        with:
          publish_dir: .
          force_orphan: true
          enable_jekyll: true
          user_name: github-actions[bot]
          github_token: ${{github.token}}
          full_commit_message: Deploy gh-pages
          user_email: github-actions[bot]@users.noreply.github.com
